# PHP upstream.
upstream php-www {
    server unix:/var/run/php-fpm/php-fpm.sock;
    # This corresponds with fastcgi_keep_conn on; NEVER USE IT.
    #keepalive 300;
}

upstream php56-www {
    server 127.0.0.1:9000;
    # This corresponds with fastcgi_keep_conn on; NEVER USE IT.
    #keepalive 300;
}

# Proxy to either Varnish, if available, or the main server block.
upstream orchestrate {
    server 127.0.0.1:6081;
    server 127.0.0.1:8080 backup;
}

# Catch all non-SSL traffic and redirect to SSL.
server {
    listen *:80;
    server_name ~^(?<domainname>.+)$;

    return 301 https://$domainname$request_uri;
}

# Varnish connects to these, and Nginx as a backup if Varnish is unavailable.
server {
    # If non-https server requests have no match, use this server block.
    listen 127.0.0.1:8080 default_server;
    server_name ~^(?<domainname>.+)$;

    set $MAGE_ROOT /vagrant/sites/$domainname/current;
    set $MAGE_MODE developer;
    root $MAGE_ROOT/pub;

    # Add hostname to requests, which is useful for load balanced instances.
    add_header X-Linus-Machine $hostname;

    include server.magento2.conf;
}

# SSL SPDY/HTTP2
# All requests come to this.
server {
    # If HTTPS server requests have no match, use this server block.
    # It's very important that default_server is defined here as well, as it
    # will dictate where requests go if nothing is found. It's especially
    # important for GCP, as its load balancers will fail without it.
    listen *:443 ssl http2 default_server;
    server_name ~^(?<domainname>.+)$;

    set $MAGE_ROOT /vagrant/sites/$domainname/current;
    set $MAGE_MODE developer;
    root $MAGE_ROOT/pub;

    ssl_certificate /etc/nginx/ssl/_.vagrant.test.crt;
    ssl_certificate_key /etc/nginx/ssl/_.vagrant.test.key;

    include server.magento1.https.conf;
}
